#!/usr/bin/env zsh

# Suggest these directories when present.
declare -a DIRS=(
  ~/ansible
  ~/dotfiles
  ~/vimwiki
)

# Suggest children of these directories when present.
declare -ar PARENT_DIRS=(
  ~/projects
  ~/projects/arc
  ~/projects/wellrested
)

################################################################################

main()
{
  local directory="$(select_directory $1)"
  attach_to_sesion "${directory}"
}

# Prompt for a directory from the suggested list unless a directory is passed
# as the first argument.
select_directory()
{
  local selected=$1
  if [[ ! -d "${selected}" ]]; then
    selected="$(select_directory_from_list)"
  fi
  print "${selected}"
}

# Gather a list of sueggeted directores and prompt the user with fzf.
select_directory_from_list()
{
  # Suggest these if present.
  local direct_dirs=($(filter_existing_dirs "${DIRS[@]}"))
  # Suggest non-hidden child directories.
  local parent_dirs=($(filter_existing_dirs "${PARENT_DIRS[@]}"))
  local child_dirs=($(find ${parent_dirs[@]} -mindepth 1 -maxdepth 1 -type d -not -path '*/.*'))
  # Add suggestions from zoxide, if available.
  local zoxide_dirs=($(command -v zoxide && zoxide query --list))
  local all_dirs=("${direct_dirs[@]}" "${child_dirs[@]}" "${zoxide_dirs[@]}")

  # Convert to a sorted list of unique directories.
  local sorted=($(printf "%s\n" "${all_dirs[@]}" | sort -u))
  printf "%s\n" ${sorted[@]} | fzf
}

# Expects an array of possible directories.
# Prints a subset of those directories that exist.
# To use: filtered=($(filter_existing_dirs "${dirs[@]}"))
filter_existing_dirs()
{
  typeset -a filtered=()
  for d in "$@"; do;
    if [[ -d "${d}" ]]; then
      filtered+=("${d}")
    fi
  done
  print "$filtered"
}

# Given a directory, attach to a Tmux session based on the directory name.
attach_to_sesion()
{
  local directory=$(realpath $1)
  local name=$(basename "${directory}" | tr . _)
  if ! tmux has-session -t "=${name}" 2> /dev/null; then
    # Create a new session.
    tmux new-session -d -s "${name}" -c "${directory}"
    # Start nvim; create a second window.
    tmux send-keys -t "=${name}:1" 'nvim' Enter
    tmux new-window -t "=${name}"
  fi

  # Switch to window 1 of the session.
  tmux switch-client -t "=${name}:1"
}

main $@
